[workspace]
members = [
    "client/single-player",
    "client/graphics",
    "shared/domain",
    "shared/util",
    "networking/client",
    "networking/server",
    "networking/shared",
]
resolver = "2"

[workspace.package]
version = "0.1.0"
authors = ["jurisk <jurisk@users.noreply.github.com>"]
license = "UNLICENSED"
edition = "2021"
rust-version = "1.80.0"

[workspace.dependencies]
serde = { version = "1.0", features = ["derive"] }
serde_json = { version = "1.0" }
uuid = { version = "1.8.0", features = ["v4", "fast-rng"] }
fastrand = "2.1.0"
log = "0.4.21"
bimap = "0.6.3"

# Should only be imported by `networking/renet` code
bevy_renet = "0.0.11"
bevy_egui = "0.25.0" # For renet_visualizer
renet_visualizer = { version = "0.0.8", features = ["bevy"] }
bincode = "1.3.3"

# From https://doc.rust-lang.org/cargo/reference/profiles.html#codegen-units
# From https://rapier.rs/docs/user_guides/bevy_plugin/common_mistakes#my-local-build-of-rapier-is-slower-than-the-online-demos
[profile.release]
# Commented for now, may reenable later:
# codegen-units = 1

# From https://bevyengine.org/learn/quick-start/getting-started/setup/#compile-with-performance-optimizations
# Enable a small amount of optimization in debug mode
[profile.dev]
opt-level = 1

# From https://bevyengine.org/learn/quick-start/getting-started/setup/#compile-with-performance-optimizations
# Enable high optimizations for dependencies (incl. Bevy), but not for our code:
[profile.dev.package."*"]
opt-level = 3

# From https://github.com/bevyengine/bevy/tree/main/examples#1-tweak-your-cargotoml
[profile.wasm-release]
# Use release profile as default values
inherits = "release"

# Optimize with size in mind, also try "s", sometimes it is better.
# This doesn't increase compilation times compared to -O3, great improvements
opt-level = "z"

# Do a second optimization pass removing duplicate or unused code from dependencies.
# Slows compile times, marginal improvements
# Commented for now, may reenable later:
# lto = "fat"

# When building crates, optimize larger chunks at a time
# Slows compile times, marginal improvements
# Commented for now, may reenable later:
# codegen-units = 1

[workspace.lints.clippy]
pedantic = "warn"
style = "warn"
unwrap_used = { level = "warn", priority = -1 }
expect_used = { level = "warn", priority = -1 }
