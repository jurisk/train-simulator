name: Rust

on:
  push:
    branches: [ "master" ]
    paths:
      - '**'
  pull_request:
    branches: [ "master" ]
    paths:
      - '**'

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    working-directory: .

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt, clippy

      # From https://github.com/Swatinem/rust-cache
      - name: Enable cache
        uses: Swatinem/rust-cache@v2

      # From https://github.com/bevyengine/bevy/blob/latest/docs/linux_dependencies.md
      - name: Install Bevy Linux dependencies and LLD linker
        run: |
          sudo apt-get install g++ pkg-config libx11-dev libasound2-dev libudev-dev
          sudo apt-get install lld clang

      # From https://github.com/bevyengine/bevy/tree/main/examples#wasm
      - name: Install WASM prerequisites
        run: |
          rustup target add wasm32-unknown-unknown
          cargo install wasm-bindgen-cli

# Nightly has more flags which we use, but we switched to using stable, and don't want to install both toolchains.
#      - name: Run rustfmt
#        run: cargo fmt --check

      - name: Run clippy
        run: cargo clippy -- -W clippy::pedantic -W clippy::style -W clippy::unwrap_used -W clippy::expect_used

      - name: Run tests
        run: cargo test --verbose

      - name: Build default target
        run: cargo build --verbose

      - name: Build WASM targets
        run: cargo build --profile wasm-release --target wasm32-unknown-unknown --package client-single-player --package networking-client --bin client_single_player --bin client_graphical

      - name: Generate WASM bindings
        run: | 
          wasm-bindgen --out-name client_single_player --out-dir static/wasm-build --target web target/wasm32-unknown-unknown/wasm-release/client_single_player.wasm
          wasm-bindgen --out-name client_graphical --out-dir static/wasm-build --target web target/wasm32-unknown-unknown/wasm-release/client_graphical.wasm

      - name: Copy assets to web directory
        run: cp -r assets static

      # Later: Copy the static assets to Google Cloud Storage?
